@using TimeTracker.Shared.Model
@using System.Timers

@if (!InLine)
{
    @if (!Show)
    {
        <button class="btn btn-success" onclick="@StartActivity">Start Activity</button>
    }
    else
    {
        <h4>Time elapsed: <span class="badge badge-secondary">@Activity.Duration.Hours.ToString("D2"):@Activity.Duration.Minutes.ToString("D2"):@((Activity.Duration.Seconds % 60).ToString("D2"))</span></h4>
        <input class="form-control" placeholder="Description" type="text" bind="@Activity.Description" />
        <input class="form-control" placeholder="Label" type="text" bind="@Activity.Label" />
        @if (Activity.Running)
        {
            <button class="btn btn-info" onclick="@pauseActivity">Pause Activity</button>
        }
        else
        {
            <button class="btn btn-info" onclick="@resumeActivity">Resume Activity</button>
        }
        <button class="btn btn-danger" onclick="@StopActivity">Stop/Save Activity</button>
        <button class="btn btn-danger" onclick="@dismissActivity">Dismiss</button>
    }
}
else
{
    @if (!Show)
    {
        <button class="btn btn-default" onclick="@StartActivity">Continue</button>
    }
    else
    {
        <span class="badge badge-secondary">@Activity.Duration.Hours.ToString("D2"):@Activity.Duration.Minutes.ToString("D2"):@((Activity.Duration.Seconds % 60).ToString("D2"))</span>
        @if (Activity.Running)
        {
            <button class="btn btn-info" onclick="@pauseActivity">Pause</button>
        }
        else
        {
            <button class="btn btn-info" onclick="@resumeActivity">Resume</button>
        }
        <button class="btn btn-primary" onclick="@StopActivity">Stop And Save</button>
        <button class="btn btn-danger" onclick="@dismissActivity">Dismiss</button>
    }

}

@functions
{
[Parameter]
private bool InLine { get; set; }
[Parameter]
private bool Show { get; set; }
[Parameter]
private TimeSpan? OldDuration { get; set; }
[Parameter]
private ActivityModel Activity { get; set; }
[Parameter]
private Func<ActivityModel, Task> SaveActivity { get; set; }
[Parameter]
private Guid Project { get; set; }
private string Description;
private Timer timer;
private int runningActivities = 0;

private void StartActivity()
{
    Show = true;
    Activity.Running = true;
    if (runningActivities == 0)
    {
        timer.Start();
    }
    ++runningActivities;
}

private void ChangeTime(Object o, ElapsedEventArgs e)
{
    if (Activity.Running)
    {
        Activity.AddSecond();
    }
    StateHasChanged();
}

private void pauseActivity()
{
    if (--runningActivities == 0)
    {
        timer.Stop();
    }
    Activity.Running = false;
}

private void resumeActivity()
{
    if (runningActivities == 0)
    {
        timer.Start();
    }
    ++runningActivities;
    Activity.Running = true;
}

private void StopActivity()
{
    if (OldDuration.HasValue)
    {
        Activity.Duration = Activity.Duration.Add(OldDuration.Value);
    }
    if (Activity.Running && --runningActivities == 0)
    {
        timer.Stop();
    }

    SaveActivity(Activity);
    Show = false;
    if (Activity.ActivityId == null)
    {
        Activity = new ActivityModel(Project);
    }
    else
    {
        Activity.Running = false;
        Activity.Duration = new TimeSpan();
    }
}

private void dismissActivity()
{
    if (Activity.Running && --runningActivities == 0)
    {
        timer.Stop();
    }
    Activity.Duration = new TimeSpan();
    Activity.Running = false;
    Show = false;
}

protected override void OnInit()
{
    base.OnInit();
    timer = new Timer();
    timer.Elapsed += ChangeTime;
    timer.Interval = 1000;
}

protected override void OnParametersSet()
{
    if (Activity == null)
    {
        Activity = new ActivityModel(Project);
    }
}
}