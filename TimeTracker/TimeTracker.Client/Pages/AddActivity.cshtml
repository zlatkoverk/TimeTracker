@using TimeTracker.Shared.Model
@using System.Timers

<div>You have @runningActivities Activities running.</div>
@if (!Activities.ContainsKey(Project))
{
    <button class="btn btn-success" onclick="@StartActivity">Start Activity</button>
}
else
{

    <h4>Time elapsed: <span class="badge badge-secondary">@Activities[Project].Duration.Minutes.ToString("D2"):@((Activities[Project].Duration.Seconds % 60).ToString("D2"))</span></h4>
    <input class="form-control" placeholder="Description" type="text" bind="@Activities[Project].Description" />
    <input class="form-control" placeholder="Label" type="text" bind="@Activities[Project].Label" />
    @if (Activities[Project].Running)
    {
        <button class="btn btn-info" onclick="@pauseActivity">Pause Activity</button>
    }
    else
    {
        <button class="btn btn-info" onclick="@resumeActivity">Resume Activity</button>
    }
    <button class="btn btn-danger" onclick="@StopActivity">Stop/Save Activity</button>

}

@functions
{
[Parameter]
private Dictionary<Guid, ActivityModel> Activities { get; set; }
[Parameter]
private Func<ActivityModel, Task> SaveActivity { get; set; }
[Parameter]
private Guid Project { get; set; }
private string Description;
private Timer timer;
private int runningActivities = 0;

private void StartActivity()
{
    Activities[Project] = new ActivityModel(Guid.Parse(Project.ToString()));
    Activities[Project].Running = true;
    if (runningActivities == 0)
    {
        timer.Start();
    }
    ++runningActivities;
}

private void ChangeTime(Object o, ElapsedEventArgs e)
{
    if (Activities[Project].Running)
    {
        Activities[Project].AddSecond();
    }
    StateHasChanged();
}

private void pauseActivity()
{
    if (--runningActivities == 0)
    {
        timer.Stop();
    }
    Activities[Project].Running = false;
}

private void resumeActivity()
{
    if (runningActivities == 0)
    {
        timer.Start();
    }
    ++runningActivities;
    Activities[Project].Running = true;
}

private void StopActivity()
{
    if (!Activities[Project].Running)
    {
        SaveActivity(Activities[Project]);
        Activities.Remove(Project);
        return;
    }
    Activities[Project].Running = false;
    SaveActivity(Activities[Project]);
    Activities.Remove(Project);
    if (--runningActivities == 0)
    {
        timer.Stop();
    }
}

protected override void OnInit()
{
    base.OnInit();
    timer = new Timer();
    timer.Elapsed += ChangeTime;
    timer.Interval = 1000;
}
}