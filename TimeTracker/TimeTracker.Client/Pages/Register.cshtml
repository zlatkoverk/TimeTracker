@using TimeTracker.Client.Services
@using TimeTracker.Shared.Model
@page "/register"
@inject RegisterService checker
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper uriHelper
@inject AppState appState
<NavMenu state=appState/>
@if (!appState.LoggedIn)
{
            <div class="container">
                <form class="form-horizontal" role="form" method="POST" action="/register">
                    <div class="row">
                        <div class="col-md-3"></div>
                        <div class="col-md-6">
                            <h2>Register New User</h2>
                            <hr>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 field-label-responsive">
                            <label for="name">Name</label>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="input-group mb-2 mr-sm-2 mb-sm-0">
                                    <div class="input-group-addon" style="width: 2.6rem"><i class="fa fa-user"></i></div>
                                    <input type="text" class="form-control" 
                                           placeholder="John" required autofocus bind="@name" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-control-feedback">
                                <span class="text-danger align-middle">
                                    <!-- Put name validation error messages here -->
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 field-label-responsive">
                            <label for="surname">Surname</label>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="input-group mb-2 mr-sm-2 mb-sm-0">
                                    <div class="input-group-addon" style="width: 2.6rem"><i class="fa fa-user"></i></div>
                                    <input type="text" class="form-control"
                                           placeholder="Doe" required autofocus bind="@surname"/>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-control-feedback">
                                <span class="text-danger align-middle">
                                    <!-- Put name validation error messages here -->
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 field-label-responsive">
                            <label for="username">Username</label>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="input-group mb-2 mr-sm-2 mb-sm-0">
                                    <div class="input-group-addon" style="width: 2.6rem"><i class="fa fa-at"></i></div>
                                    <input type="text" class="form-control" placeholder="user123" required autofocus onchange="@ChangeUsername" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-control-feedback">
                                @if (checker.IsAvailable)
                                {
                                    <span class="text-success align-middle">
                                        <i class="fa fa-close"> @checker.UsernameMessage</i>
                                    </span>
                                }
                                else
                                {
                                    <span class="text-danger align-middle">
                                        <i class="fa fa-close"> @checker.UsernameMessage</i>
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 field-label-responsive">
                            <label for="password">Password</label>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group has-danger">
                                <div class="input-group mb-2 mr-sm-2 mb-sm-0">
                                    <div class="input-group-addon" style="width: 2.6rem"><i class="fa fa-key"></i></div>
                                    <input type="password" class="form-control"
                                           placeholder="Password" required bind="@Password"/>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-control-feedback">
                                <span class="text-danger align-middle">
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 field-label-responsive">
                            <label for="password">Confirm Password</label>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="input-group mb-2 mr-sm-2 mb-sm-0">
                                    <div class="input-group-addon" style="width: 2.6rem">
                                        <i class="fa fa-repeat"></i>
                                    </div>
                                    <input type="password" class="form-control"
                                           placeholder="Password" required bind="@PasswordCheck"/>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3"></div>
                        <div class="col-md-6">
                            <span class="text-danger align-middle">@checker.GeneralMessage</span>
                        </div>
                        <div class="row">
                            <div class="col-md-3"></div>
                            <div class="col-md-6">
                                <button type="submit" class="btn btn-success" onclick="@CheckAndRegister"><i class="fa fa-user-plus"></i> Register</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
}
else
{
    <h1>Already registered</h1>
}
    @functions
            {
        public string Password { get; set; }
        public string PasswordCheck { get; set; }

        private string name;
        private string surname;

        public Func<Task> CheckAvailability { get; set; }
        public Func<RegisterModel, Task> RegisterUser { get; set; }

        public void ChangeUsername(UIChangeEventArgs e)
        {
            checker.Username = ((string)e.Value).Trim();
            CheckAvailability();
        }

        public void CheckAndRegister()
        {
            CheckAvailability();
            if (!checker.IsAvailable)
            {
                checker.GeneralMessage = "Please select another username";
                return;
            }
            if (string.IsNullOrEmpty(Password) || Password != PasswordCheck)
            {
                checker.GeneralMessage = "Passwords did not match or they were empty";
                Password = "";
                PasswordCheck = "";
                return;
            }
            checker.GeneralMessage = "";

            RegisterUser(new RegisterModel(checker.Username, Password, name, surname));

            uriHelper.NavigateTo("/");
        }

        protected override void OnInit()
        {
            CheckAvailability = checker.CheckAvailability;
            RegisterUser = checker.Register;
            checker.OnChange += StateHasChanged;
            appState.OnChange += StateHasChanged;
        }
            }
