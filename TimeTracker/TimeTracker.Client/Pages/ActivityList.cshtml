@using TimeTracker.Shared
@using TimeTracker.Shared.Model
@inject HttpClient http

@if (Activities != null)
{@foreach (var label in ActivitiesByLabel.Keys)
    {
        <h3>@label</h3>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th scope="col">Description</th>
                    <th scope="col">Duration</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var activity in ActivitiesByLabel[label])
                {
                    <tr>
                        <td>@activity.Description</td>
                        <td>@activity.Duration.Hours.ToString("D2"):@activity.Duration.Minutes.ToString("D2"):@((activity.Duration.Seconds % 60).ToString("D2"))</td>
                        <td><AddActivity Project=Project SaveActivity=SaveActivity Activity=getModel(activity) OldDuration=activity.Duration InLine=true/></td>
                        <td onclick="@(()=>remove(activity))"><button class="btn btn-default">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@functions
{
[Parameter]
private Guid Project { get; set; }
[Parameter]
private IList<Activity> Activities { get; set; }
[Parameter]
private Action notifyParent { get; set; }
[Parameter]
private Func<ActivityModel, Task> SaveActivity { get; set; }
private IDictionary<string, IList<Activity>> ActivitiesByLabel { get; set; }

protected override void OnParametersSet()
{
    IDictionary<string, IList<Activity>> dict = new Dictionary<string, IList<Activity>>();
    foreach (var a in Activities)
    {
        if (!dict.ContainsKey(a.Label))
        {
            dict[a.Label] = new List<Activity>();
        }
        dict[a.Label].Add(a);
    }

    ActivitiesByLabel = dict;
}

private async Task remove(Activity activity)
{
    await http.PostJsonAsync("api/activity/remove", activity.Id);
    Activities.Remove(activity);
    ActivitiesByLabel[activity.Label].Remove(activity);
    notifyParent();
}

private ActivityModel getModel(Activity activity)
{
    return new ActivityModel()
    {
        ActivityId = activity.Id,
        Description=activity.Description,
        Label=activity.Label
    };
}
}